{"version":3,"sources":["components/Time.jsx","components/SettingsBackground.jsx","components/Settings.jsx","components/SettingsModal.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Time","newDate","Date","month","getUTCMonth","day","getDate","year","getFullYear","dayWeek","getDay","date","state","time","componentDidMount","bind","this","interval","setInterval","setState","toLocaleTimeString","clearInterval","timeUpdate","className","React","Component","SettingsBackground","type","placeholder","id","Settings","SettingsModal","useState","show","setShow","handleClose","onClick","Modal","size","onHide","centered","Header","Title","Body","Footer","data","version","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mmCA0CeA,G,wDAtCX,aAAe,IAAD,sBACV,eACA,IAAIC,EAAU,IAAIC,KAEZC,EADW,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAC5FF,EAAQG,eAC3BC,EAAMJ,EAAQK,UACdC,EAAON,EAAQO,cAEfC,EADS,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YACnDR,EAAQS,UAC3BC,EAAI,UAAMF,EAAN,aAAkBN,EAAlB,YAA2BE,EAA3B,aAAmCE,GATnC,OAUV,EAAKK,MAAQ,CACXD,KAAMA,EACNE,KAAM,QAER,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAdf,E,gEAiBO,IAAD,OACGC,KAAKC,SAAWC,aAAY,kBAAM,EAAKC,SAAS,CAAEN,MAAM,IAAIX,MAAOkB,yBAAyB,M,6CAG/GC,cAAcL,KAAKM,c,+BAInB,OACI,yBAAKC,UAAU,sBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACf,wBAAIA,UAAU,YAAYP,KAAKJ,MAAMC,MACrC,4BAAKG,KAAKJ,MAAMD,KAAhB,Y,GA/BDa,IAAMC,Y,gCCmBVC,E,uKAjBP,OACI,yBAAKH,UAAU,cACX,6CACA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,2BAAOI,KAAK,OAAOC,YAAY,yBAAyBL,UAAU,eAAeM,GAAG,aAExF,yBAAKN,UAAU,OACX,2BAAOI,KAAK,OAAOC,YAAY,yCAAyCL,UAAU,mBAG1F,8C,GAbiBC,IAAMC,WCYxBK,E,uKATP,OACI,yBAAKP,UAAU,YACP,kBAAC,EAAD,MACA,4BAAQA,UAAU,yBAAlB,qB,GALGC,IAAMC,WCgCdM,MA/Bf,WAA0B,IAAD,EACGP,IAAMQ,UAAS,GADlB,mBACdC,EADc,KACRC,EADQ,KAGfC,EAAc,kBAAMD,GAAQ,IAGlC,OACE,yBAAKX,UAAU,iBACb,4BAAQA,UAAU,0BAA0Ba,QAJ7B,kBAAMF,GAAQ,KAI7B,YAIA,kBAACG,EAAA,EAAD,CAAOC,KAAK,KAAKf,UAAU,gBAAeU,KAAMA,EAAMM,OAAQJ,EAAaK,UAAQ,GACjF,kBAACH,EAAA,EAAMI,OAAP,KACE,kBAACJ,EAAA,EAAMK,MAAP,kBAEF,kBAACL,EAAA,EAAMM,KAAP,KAEE,kBAAC,EAAD,OAGF,kBAACN,EAAA,EAAMO,OAAP,KACE,4BAAQrB,UAAU,qBAAqBa,QAASD,GAAhD,aCVGS,E,uKAXP,OACI,yBAAKrB,UAAU,uBACX,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,yBAAb,WAA8CsB,EAAKC,SACnD,kBAAC,EAAD,Y,GANGtB,IAAMC,WCcZsB,E,uKATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUvB,IAAMC,WCKJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.749002da.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nclass Time extends React.Component {\r\n    constructor() {\r\n        super();\r\n        let newDate = new Date();\r\n        let monthNames = [\"January\",\"Feburary\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n        const month = monthNames[newDate.getUTCMonth()];\r\n        const day = newDate.getDate();\r\n        const year = newDate.getFullYear();\r\n        let dayNames = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\r\n        const dayWeek = dayNames[newDate.getDay()];\r\n        const date = `${dayWeek}, ${month} ${day}, ${year}`;\r\n        this.state = {\r\n          date: date,\r\n          time: \"time\"\r\n        };\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n      }\r\n\r\n    componentDidMount() {\r\n        const timeUpdate = this.interval = setInterval(() => this.setState({ time: new Date().toLocaleTimeString() }), 50);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timeUpdate);\r\n      }\r\n\r\n    render() { \r\n        return (\r\n            <div className=\"timebody container\">\r\n                <div className=\"card time\">\r\n                    <div className=\"card-body\">\r\n                    <h1 className=\"timetext\">{this.state.time}</h1>\r\n                    <h1>{this.state.date}.</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Time;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nclass SettingsBackground extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className=\"form-group\">\r\n                <label>Background</label>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <input type=\"text\" placeholder=\"Background Image Url..\" className=\"form-control\" id=\"bgInput\"/>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <input type=\"text\" placeholder=\"Background Color (Accepts color codes)\" className=\"form-control\"/>\r\n                    </div>\r\n                </div>\r\n                <button>Hello</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default SettingsBackground;","import React from 'react';\r\nimport SettingsBackground from \"./SettingsBackground.jsx\";\r\nimport \"./style.css\";\r\n\r\nclass Settings extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className=\"settings\">\r\n                    <SettingsBackground />\r\n                    <button className='lgbmegatron scale lb1'>Save Changes</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Settings;","import React from 'react';\r\nimport \"./style.css\";\r\nimport { Button,Modal } from 'react-bootstrap';\r\nimport Settings from \"./Settings.jsx\";\r\n\r\nfunction SettingsModal() {\r\n    const [show, setShow] = React.useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n  \r\n    return (\r\n      <div className=\"SettingsModal\">\r\n        <button className=\"nav-link settingsbutton\" onClick={handleShow}>\r\n          Settings\r\n        </button>\r\n  \r\n        <Modal size=\"lg\" className=\"special_modal\"show={show} onHide={handleClose} centered>\r\n          <Modal.Header>\r\n            <Modal.Title>Settings</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n\r\n            <Settings />\r\n\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <button className=\"odark lb bsm scale\" onClick={handleClose}>\r\n              Close\r\n            </button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n \r\nexport default SettingsModal;","import React from 'react';\r\nimport data from \"../../package.json\";\r\nimport SettingsModal from \"./SettingsModal.jsx\"\r\n\r\nclass Footer extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className=\"fixed-bottom footer\">\r\n                <nav className=\"nav footernav\">\r\n                  <a className=\"nav-link package-json\">Version {data.version}</a>\r\n                  <SettingsModal />\r\n                </nav>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Footer;","import React from 'react';\r\nimport './App.css';\r\nimport Time from \"./components/Time.jsx\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Footer from \"./components/Footer.jsx\";\r\nimport Settings from \"./components/SettingsModal.jsx\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Time />\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}